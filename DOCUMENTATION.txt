
ContentCraft AI - Project Documentation
Version: 1.4 (Reflecting Comprehensive Admin Moderation and User Settings)

Table of Contents
-----------------
1. Project Overview
2. Core Architecture
3. Detailed Feature Breakdown
    3.1 User-Facing Features
    3.2 Admin Features
4. Data Models
5. AI Integration
6. Setup & Configuration
7. Middleware & Security
8. Future Enhancements

-----------------
1. Project Overview
-----------------
ContentCraft AI is a Next.js web application designed as a multi-agent AI content creation system. It aims to assist users in generating comprehensive content campaigns by leveraging specialized AI agents that collaborate, analyze brand identity, debate strategies, and produce content in multiple formats. The platform includes features for user authentication (with roles: viewer, editor, admin), campaign management, brand analysis, simulated agent interactions, content generation, performance prediction, user feedback mechanisms, content translation, and a gamification system. It also incorporates a dedicated admin dashboard for platform oversight, user management, campaign and content version moderation (including a dedicated flagged content view), and platform analytics. Users can manage their profile settings, including name and password changes for credential-based accounts.

-----------------
2. Core Architecture
-----------------
The application is built using a modern JavaScript stack:

*   **Frontend**:
    *   Next.js 15+ (App Router)
    *   React 18+ (Functional Components, Hooks)
    *   TypeScript
    *   ShadCN UI Components (for UI primitives)
    *   Tailwind CSS (for styling)
    *   NextAuth.js Client (for session management, `useSession`)
    *   Recharts (for data visualization in admin dashboard and performance predictor)

*   **Backend**:
    *   Next.js API Routes (for RESTful services, including admin-specific and user profile endpoints)
    *   Genkit (for orchestrating AI model interactions, specifically Google Gemini)
    *   Node.js runtime environment

*   **Database**:
    *   MongoDB (NoSQL database for storing user data, campaigns, feedback logs, etc.)
    *   Accessed via the official `mongodb` Node.js driver.

*   **Authentication**:
    *   NextAuth.js (handles user sign-in, sign-up, JWT session management)
    *   Supports Credentials (email/password) and Google OAuth providers.
    *   User roles ('viewer', 'editor', 'admin') stored in DB and included in session token.

*   **Middleware**:
    *   Next.js middleware (`src/middleware.ts`) protects authenticated routes (e.g., `/dashboard/*`) and admin routes (`/admin/*`), redirecting unauthorized users. It also handles banned user access by redirecting them from protected routes.

*   **AI Models**:
    *   Google Gemini (via Genkit and `@genkit-ai/googleai` plugin) for text generation, analysis, translation, and (conceptually) vision/audio tasks.

-----------------
3. Detailed Feature Breakdown
-----------------

    3.1 User-Facing Features
    ------------------------
    *   **User Authentication & Role Awareness**:
        *   Purpose: Secure user access and tailor experience based on roles.
        *   How: NextAuth.js with MongoDB adapter. Users can register/login via email/password or Google. Session JWTs manage authentication and include user roles. UI elements and API access are restricted based on role.
        *   Key Files: `src/app/api/auth/`, `src/app/(app)/dashboard/layout.tsx`, `src/middleware.ts`.

    *   **Dashboard & Campaign Overview (User View)**:
        *   Purpose: Central hub for users to view and manage *their own* content campaigns.
        *   How: Displays a list of user's campaigns fetched from `/api/campaigns`. Each campaign is shown as a card with title, status, and actions (view, edit, delete - permissions apply).
        *   Key Files: `src/app/(app)/dashboard/page.tsx`, `src/app/(app)/dashboard/components/CampaignList.tsx`, `src/app/(app)/dashboard/components/CampaignCard.tsx`.

    *   **Creative Brief Input & Campaign Generation**:
        *   Purpose: Allow users (editors/admins) to define parameters for a new content campaign or update existing ones.
        *   How: A form captures campaign title, product/service description (brief), target audience, desired tone, and content goals. This data is POSTed/PUT to `/api/campaigns`. Triggers a multi-step AI process.
        *   Key Files: `src/app/(app)/dashboard/components/CampaignGenerator.tsx`.

    *   **Brand DNA Upload & Analysis**:
        *   Purpose: Extract brand identity (voice, style, values) from sample content.
        *   How: Users upload text files/PDFs. The content (as a data URI) is sent to `/api/brand/analyze`, which uses the `brand-learning` Genkit flow.
        *   Key Files: `src/app/(app)/dashboard/components/BrandDNAAnalyzer.tsx`, `src/ai/flows/brand-learning.ts`, `src/app/api/brand/analyze/route.ts`.

    *   **Creative War Room (Simulated Agent Debate)**:
        *   Purpose: Simulate collaboration between different AI agent personas to refine content strategy.
        *   How: The `agent-debate` Genkit flow generates a summary and suggestions. Displayed in a chat-like UI.
        *   Key Files: `src/app/(app)/dashboard/components/AgentDebatePanel.tsx`, `src/ai/flows/agent-debate.ts`.

    *   **Multi-Format Content Generation & Preview**:
        *   Purpose: Generate diverse content pieces from a single, refined brief.
        *   How: The `content-generation` Genkit flow produces text for various formats. Previewed in a tabbed interface.
        *   Key Files: `src/app/(app)/dashboard/components/MultiFormatPreview.tsx`, `src/ai/flows/content-generation.ts`.

    *   **Content Translation**:
        *   Purpose: Translate generated content into various languages.
        *   How: Users select content and target language. The `translate-content-flow` Genkit flow performs the translation.
        *   Key Files: `src/app/(app)/dashboard/components/MultiFormatPreview.tsx` (UI), `src/ai/flows/translate-content-flow.ts`, `src/app/api/content/translate/route.ts`.

    *   **Content Evolution Timeline**:
        *   Purpose: Allow users to track the history of generated content for a campaign.
        *   How: Displays `ContentVersion` objects chronologically. Admins also see flagging controls here.
        *   Key Files: `src/app/(app)/dashboard/components/ContentEvolutionTimeline.tsx`.

    *   **Performance Predictor (Simulated)**:
        *   Purpose: Provide users with AI-driven estimates of content performance.
        *   How: UI component displays example performance metrics using Recharts via a mock API.
        *   Key Files: `src/app/(app)/dashboard/components/PerformancePredictor.tsx`.

    *   **User Feedback Loop**:
        *   Purpose: Collect user opinions on generated content.
        *   How: Users rate content (thumbs up/down) and add comments. Feedback is sent to `/api/feedback` and stored. Awards XP.
        *   Key Files: `src/app/(app)/dashboard/components/MultiFormatPreview.tsx`, `src/app/api/feedback/route.ts`.

    *   **Private Mode / Confidentiality Setting**:
        *   Purpose: Allow users to mark campaigns as private.
        *   How: A boolean `isPrivate` flag on the `Campaign` schema and UI.
        *   Key Files: `src/app/(app)/dashboard/components/CampaignGenerator.tsx`, `src/app/api/campaigns/route.ts`.

    *   **Gamification / Creative XP System**:
        *   Purpose: Engage users by awarding points and levels.
        *   How: User profiles store `totalXP`, `level`, `badges`. XP awarded for activities via `/api/user/update-xp`. Progress displayed in site header. Feature unlocks are level-gated (e.g., A/B Testing placeholder).
        *   Key Files: `src/components/UserXPDisplay.tsx`, `src/components/SiteHeader.tsx`, `src/app/api/user/update-xp/route.ts`.

    *   **User Settings & Profile Management**:
        *   Purpose: Allow users to manage their profile (name, password).
        *   How: Dedicated settings page with forms to update name (via `PUT /api/user/profile`) and change password (via `POST /api/user/change-password` for credential accounts). Session is updated upon name change.
        *   Key Files: `src/app/(app)/dashboard/settings/page.tsx`, `src/app/api/user/profile/route.ts`, `src/app/api/user/change-password/route.ts`.

    3.2 Admin Features
    ------------------
    *   **Admin Dashboard & Platform Overview**:
        *   Purpose: Centralized control panel for administrators.
        *   How: Accessible via `/admin/dashboard`. Displays summary statistics, charts for platform activity (some mocked), XP leaderboard, and provides navigation to user, campaign, and flagged content management sections.
        *   Key Files: `src/app/(admin)/dashboard/page.tsx`, `src/app/(admin)/layout.tsx`.

    *   **User Management (Roles & Banning)**:
        *   Purpose: Admins can manage user accounts, roles, and access.
        *   How: Admins can view a table of all users, change their roles (viewer, editor, admin), and ban/unban users. Changes are persisted to the `users` collection via `PUT /api/admin/users/[userId]`. Middleware and NextAuth callbacks enforce bans.
        *   Key Files: `src/app/(admin)/dashboard/components/UserTable.tsx`, `src/app/api/admin/users/route.ts`, `src/app/api/admin/users/[userId]/route.ts`.

    *   **Campaign Oversight & Moderation**:
        *   Purpose: Admins can view, manage, and moderate all campaigns.
        *   How: Admins list all campaigns (from `/api/admin/campaigns`). They can filter, view full details (brief, debates, content versions in a dedicated campaign detail tab), flag/unflag campaigns, add moderation notes (via `PUT /api/admin/campaigns/[campaignId]/flag`), and delete any campaign (via `DELETE /api/admin/campaigns/[campaignId]`).
        *   Key Files: `src/app/(admin)/dashboard/components/AdminCampaignList.tsx`, `src/app/(admin)/dashboard/page.tsx` (for detail view), `src/app/api/admin/campaigns/route.ts`, `src/app/api/admin/campaigns/[campaignId]/route.ts`, `src/app/api/admin/campaigns/[campaignId]/flag/route.ts`.

    *   **Content Version Moderation**:
        *   Purpose: Admins can review and moderate individual flagged content versions.
        *   How: 
            *   A dedicated "Flagged Content" tab (`FlaggedContentTable.tsx`) shows a table of all `ContentVersion`s where `isFlagged` is true, fetched from `GET /api/admin/content/flagged`. Admins can preview content, see moderation notes, and unflag versions (which calls `PUT /api/admin/campaigns/[campaignId]/versions/[versionId]/flag` and clears notes).
            *   Individual versions can also be flagged/unflagged with notes from the campaign detail view's `ContentEvolutionTimeline.tsx` (admin context).
        *   Key Files: `src/app/(admin)/dashboard/components/FlaggedContentTable.tsx`, `src/app/(app)/dashboard/components/ContentEvolutionTimeline.tsx` (admin context), `src/app/api/admin/content/flagged/route.ts`, `src/app/api/admin/campaigns/[campaignId]/versions/[versionId]/flag/route.ts`.

    *   **Admin Search**:
        *   Purpose: Allow admins to quickly find specific users or campaigns.
        *   How: Search input fields in `UserTable.tsx` (name, email, ID) and `AdminCampaignList.tsx` (title, brief, user ID, campaign ID).
        *   Key Files: `src/app/(admin)/dashboard/components/UserTable.tsx`, `src/app/(admin)/dashboard/components/AdminCampaignList.tsx`.

    *   **Platform Analytics (Admin View)**:
        *   Purpose: Display key metrics and charts for platform activity.
        *   How: 
            *   Total users, total campaigns (from DB).
            *   (Mocked) Weekly platform activity (users, campaigns, AI flows) chart.
            *   (Mocked) Top content formats generated (pie chart).
            *   XP Leaderboard showing top users (from DB).
        *   Key Files: `src/app/(admin)/dashboard/page.tsx`.

    *   **Data Export (Conceptual)**:
        *   Purpose: Allow admins to download platform data.
        *   How: Placeholder buttons on the admin dashboard simulate CSV export for campaigns, feedback logs, and user data.
        *   Key Files: `src/app/(admin)/dashboard/page.tsx`.

-----------------
4. Data Models (Key MongoDB Schemas)
-----------------

    *   **User** (`users` collection):
        *   `_id`: ObjectId
        *   `name`: String (nullable)
        *   `email`: String (unique, nullable)
        *   `password`: String (hashed, if using credentials, nullable)
        *   `image`: String (URL to avatar, nullable)
        *   `role`: String ('viewer', 'editor', 'admin', default 'viewer')
        *   `emailVerified`: Date (nullable)
        *   `createdAt`: Date
        *   `updatedAt`: Date
        *   `totalXP`: Number (default 0)
        *   `level`: Number (default 1)
        *   `badges`: Array of Strings (default [])
        *   `isBanned`: Boolean (default false)

    *   **Campaign** (`campaigns` collection):
        *   `_id`: ObjectId
        *   `id`: String (string version of _id)
        *   `userId`: String (ObjectId string, links to User)
        *   `title`: String
        *   `brief`: String
        *   `targetAudience`: String (optional)
        *   `tone`: String (optional)
        *   `contentGoals`: Array of Strings (optional)
        *   `brandId`: String (optional)
        *   `referenceMaterials`: Array of Objects (optional)
        *   `agentDebates`: Array of `AgentInteraction` objects
        *   `contentVersions`: Array of `ContentVersion` objects
        *   `status`: String (e.g., 'draft', 'generating', 'published')
        *   `isPrivate`: Boolean (default false)
        *   `isFlagged`: Boolean (default false, for admin campaign moderation)
        *   `adminModerationNotes`: String (optional, for admin campaign moderation)
        *   `scheduledPosts`: Array (optional)
        *   `abTests`: Array (optional)
        *   `createdAt`: Date
        *   `updatedAt`: Date

    *   **AgentInteraction** (embedded in Campaign):
        *   `agent`: String
        *   `message`: String
        *   `timestamp`: Date
        *   `agentId`: String (optional)
        *   `agentName`: String (optional)
        *   `role`: String (optional, AgentRole)
        *   `type`: String (optional, e.g., 'statement')


    *   **ContentVersion** (embedded in Campaign):
        *   `id`: String (unique version identifier)
        *   `versionNumber`: Number
        *   `timestamp`: Date
        *   `actorName`: String
        *   `changeSummary`: String
        *   `multiFormatContentSnapshot`: Object (MultiFormatContent)
        *   `isFlagged`: Boolean (default false, for admin moderation of this version)
        *   `adminModerationNotes`: String (optional, admin notes for this version)

    *   **UserFeedback** (`feedback_logs` collection):
        *   `_id`: ObjectId
        *   `userId`: ObjectId (links to User)
        *   `campaignId`: ObjectId (links to Campaign)
        *   `contentVersionId`: ObjectId (optional, links to specific version ID within a campaign)
        *   `contentFormat`: String
        *   `rating`: Number (1 or -1)
        *   `comment`: String (optional)
        *   `timestamp`: Date

    *   **BrandDNA** (`brand_dna` collection - conceptual for full persistence if required beyond session):
        *   Contains fields for `voiceProfile`, `visualStyle`, `contentPatterns` as defined in `src/types/brand.ts`.

-----------------
5. AI Integration
-----------------
*   **Genkit**: Primary framework for AI flows (`src/ai/`).
*   **Google Gemini**: Main LLM via Genkit for analysis, debate simulation, content generation, translation.
*   **Prompts**: Defined in Genkit flows using Handlebars and Zod schemas.

-----------------
6. Setup & Configuration
-----------------
Refer to `README.md`. Key `.env.local` variables: `MONGODB_URI`, `NEXTAUTH_SECRET`, `NEXTAUTH_URL`, `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET`, `GOOGLE_API_KEY`.

-----------------
7. Middleware & Security
-----------------
*   **Route Protection**: `src/middleware.ts` protects `/dashboard/*` (authentication) and `/admin/*` (authentication + 'admin' role). Redirects unauthorized users.
*   **Banned Users**: NextAuth `signIn` callback prevents login if `isBanned` is true. Middleware redirects already authenticated but subsequently banned users from protected routes.
*   **API Security**: Admin APIs (`/api/admin/*`) check for 'admin' role in JWT. Other sensitive APIs check for general authentication. Role-based access for campaign creation/editing is handled in respective API routes.

-----------------
8. Future Enhancements
-----------------
*   Real-time Agent Debates (WebSockets).
*   Full File Uploads & Processing (Cloud Storage instead of data URIs for large files).
*   Advanced BrandDNA persistence, evolution tracking, and usage in generation.
*   Functional Content Calendar & A/B Testing (beyond placeholders).
*   Real Analytics & Data Export (beyond placeholders).
*   Team Collaboration features (beyond placeholders).
*   AI Usage Monitoring & Cost Tracking.
*   Feature Flags for beta features.
*   More granular permissions within roles (e.g., editor can only edit their own campaigns).
```